오늘 한 것
​
실습 - JAVA 맛보기
구구단, 학점, a~b까지의 합, Scanner, 형식 문자열, 데이터 교환, for문, if문
​
지식 - UI, GUI CLI, IDE, Module, OOP, Class와 특성, Method, Method 선언 요소, 인스턴스
Literal, 변수 초기화, 변수, 타입
​
UI GUI

UI(User Interface)
디지털 기기를 작동시키는 명령어나 기법을 포함하는 사용자 환경을 뜻한다
시스템과 사용자 사이의 의사소통을 목적으로 하는 사용설명서의 일종이라고 할 수 있음

GUI(Graphic User Interface)
사용자가 그래픽을 통해 컴퓨터와 정보를 교환하는 환경을 말합니다.
그래픽 기반 UI, UI의 그래픽화, 그래픽을 통해 사용자와 컴퓨터간의 정보이 가능함

CLI는 점원에게 말 또는 글로 주문하는 것
GUI는 그림이 그려진 메뉴판에서 원하는 것을 가리키는 것

CLI(CUI) - 직접 문자를 입력하는 인터페이스

bin(binary)폴더
-컴파일된 실행파일, 외부 라이브러리 또는 모듈 등 실행 가능한 파일들이 위치하는 폴더

src(source)폴더
-프로그래밍 언어로 작성된 소스 코드 파일들이 저장되는 폴더
컴파일러나 빌드 도구가 소스 코드를 참조해 실행 파일이나 라이브러리 등을 생성할 때 사용됨

IDE(integrated Development Environment) = 통합 개발 환경
소프트웨어 개발을 위한 다양한 도구와 기능들을 통합하여 제공하는 환경
소프트웨어 개발에 관련된 모든 작업을 하나의 프로그램 안에서 모두 처리할 수 있는 환경을 제공하는 툴

자바 소스파일(.java) > 컴파일(javac) > 바이트 코드 파일(.class) > JVM > 기계어 > 실행
JVM이 설치되어 있으면 class 파일을 각 운영체제에 맞는 언어로 번역 가능

프로그래밍 = 남이 만들어 놓은 것을 믿고 그 위에 다시 쌓아올리는 것

perspective = 작업 영역에 대한 설정 및 레이아웃
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Module
-프로그램을 구성하는 구성 요소
-관련된 데이터와 함수를 하나로 묶어 특정 기능을 수행
-보통 하나의 소스 파일이 아닌, 함수의 기능별로 따로 모듈을 구성
-코드의 구조를 단순화하고 재사용성을 높여 유지보수에 도움이 됨
-작은 조각으로 나누어 다루기 쉬워짐
-이러한 모듈을 합쳐 하나의 프로그램을 만드는 방식을 모듈화 프로그래밍이라고 함

module-info.java 파일
-모듈의 이름, 의존성 선언 및 내보낼 패키지 등을 명시

다양한 성질을 가짐 - 나중에 공부

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

객체 지향 프로그래밍(OOP, Object-Oriented Programming)
모든 데이터를 객체(object)로 취급하며, 이러한 개념을 중심으로 프로그래밍이 이루어짐

모든 자바 프로그램에는 class 선언이 있다

Class
-객체를 정의하는 틀, 또는 설계도와 같은 개념
-객체의 상태(속성)를 나타내는 필드와 행동(기능)을 나타내는 메소드로 구성

필드 = 클래스에 포함된 변수
메소드 = 특정 작업을 수행하기 위한 명령문의 집합

클래스는 데이터와 해당 데이터를 처리하는 메서드(함수)의 집합입니다.
객체 지향 프로그래밍에서는 현실 세계의 객체를 모델링하여 프로그램을 작성하는데 사용됩니다.

클래스는 Java에서 코드의 구조화와 재사용성을 촉진하는 핵심 요소 중 하나이며,
객체 지향 프로그래밍의 기본 원칙 중 하나인 추상화, 캡슐화, 상속, 다형성을 지원합니다.

추상화(Abstraction)

객체들의 공통적인 특징을 묶어 클래스로 정의하는 것
추상화를 진행하면 항상 이를 대표하는 이름이 생성됨
메소드를 정의하는 것도 기능의 추상화라고 볼 수 있음
인스턴스화(Instance)의 반대되는 개념임

캡슐화(Encapsulation)

객체의 내용과 기능을 하나로 묶어서 관리하는 것

데이터를 보호하고, 외부에서 직접 접근하지 못하도록 해 안정성을 높힘
하지만 메소드를 통해 간접적으로 객체의 데이터에 접근할 수 있음

상속성(Inheritance)

기존 클래스의 특성을 그대로 물려받은 하위 클래스를 만들 수 있는 기능
클래스의 특징(속성와 기능)들을 그대로 다른 클래스에게 물려주고 싶을 때 사용
코드의 재사용성이 증가하고, 계층 구조를 형성하여 유지보수를 용이하게 함

다형성(Polymorphism)
하나의 연산자 또는 메소드에 오버라이딩, 오버로딩 등을 통해 다른 클래스에 대해 다른 동작을 하도록 하는 것
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Method
-특정 작업을 수행하는 코드 블록
-언어에서는 함수(Function)라고 불림
-객체 지향 프로그래밍에서는 클래스에 속한 함수를 메서드라고 부름
-특정한 동작 또는 기능을 수행하는 재사용 가능한 블록

메소드 선언

[접근 제어자] [반환 타입] [메서드 이름]([매개변수 목록]) {}

public static void main(String[] args)
-Java 프로그램의 실행 시작 지점을 나타내는 시그니처 메서드로 JVM은 이 메서드를 찾아 실행을 시작함

접근제어자(public, protected, private, default)
-클래스 내부의 데이터를 보호하기 위해서 사용
-캡슐화의 일종으로 접근 권한을 제어
-private = 동일한 클래스 내 접근 가능, 외부 X
-protected = 같은 패키지 내의 클래스, 또는 해당 클래스를 상속한 다른 패키지의 클래스에서 접근 가능
-default = 같은 패키지 내에서만 접근 허용
-public = 접근 제한 없음

메서드 정의 = Static, Void

-static: 인스턴스에 종속되지 않고 클래스 수준에서 호출될 수 있다 = 인스턴스 없이도 존재한다
-void: 메서드(함수)가 값을 반환하지 않고, 단순히 어떤 동작을 수행하는 역할만 함

main: 이 특별한 메서드의 이름은 main입니다.

String[] args
커맨드 라인에서 전달되는 인자(argument)들을 저장하는 문자열 배열입니다

인스턴스화
자바에서 클래스를 사용하기 위해 우선 해당 클래스 타입의 객체(object)를 선언하는 것
이렇게 선언된 해당 클래스 타입의 객체를 인스턴스(instance)라고 함

인스턴스란 메모리에 할당된 객체를 의미함


하나의 클래스로부터 여러 개의 인스턴스를 생성할 수 있고
생성된 인스턴스는 독립된 메모리 공간에 저장된 자신만의 필드를 가질 수 있음

인스턴스는 부모 클래스의 모든 메소드(method)를 공유(상속)함
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
알고리즘 - 순서도
문제 해결을 위해 '변수 초기화, 입력/출력, 계산/처리, 조건, 반복' 등의 요소를 고민할 것

int, String = 가장 자주쓰이는 타입

반복되는 동일한 값이 들어가는 부분을 변수로 대체하면 프로그램 수정과 가독성에 도움이 됨

컴파일 후 실행파일(.class)을 만들때는 주석은 자동으로 삭제됨

1-1확인문제
1. b a c d
2. O, O, X, O
3. O, O, "X", O, = 3번 컴파일 후 실행파일(.class)을 만들때는 주석은 자동으로 삭제됨
4. O, O, X, O
5. "2" 3 4

2-1확인문제
1. O O O X
2. O X "X" O O "X" = 첫글자 숫자 X, 예약어 X - 이미 다른 의미로 쓰이고 있는 단어
3. 4 = socre2 변수의 초기화가 이루어지지 않음
4. v3가 선언된 영역을 벗어난 곳에서 v1 = v2 + v3 연산이 이루어지고 있다- 변수는 선언된 블록을 벗어나면 메모리에서 지워짐
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
리터럴(literal) = 소스 코드에서 프로그래머에 의해 직접 입력된 값
타입 = 메모리에 할당될 수 있는 값의 범위를 나타냄
사람이 이해하기 쉬운 변수명을 고민하라

변수초기화 : 변수에 처음으로 값을 할당하는 과정

데이터 교환(Data Swap)
x y temp - 제 3의 메모리(temp)에 값을 저장했다 덮어씌우는 방식
한번에 이루어지지 않고 어딘가에 저장된 값을 불러와 덮어 씌우는 방식


변수가 선언된 블록을 벗어나면 해당 변수는 메모리에서 지워진다
코딩할때 들여쓰기 - 바깥에서 안쪽으로 코딩한다는 느낌으로
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
데이터 입력
System.in.read = 키코드를 하나씩 읽어 입력된 내용이 파편화 됨

Scanner = 입력장치로부터 데이터를 읽기 위한 클래스, System.in.read의 단점을 보완

Import java.util.Scanner = java.util에서 Scanner Class 불러오기

scanner타입 변수.nextLine() = 엔터를 치면 입력된 값이 엔터를 제외하고 문자열 타입 데이터로 입력됨

scanner타입 변수.nextInt() = 엔터를 치면 입력된 값이 엔터를 제외하고 정수 타입 데이터로 입력됨

scanner.next~~();를 연속으로 사용시 버퍼 비우기 = scanner.nextLine(); 추가
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
형식문자열
-특정 형식에 맞춰 문자열 출력을 자동화 할 수 있음
코드의 가독성을 향상시키고 일관된 형식을 유지하는 데 도움이 됨
각 순번 타입에 맞춘 값 또는 변수를 입력해야함
("성명: %s, 점수: %d, 등급: %s\n", name, score, grade)
순번 = %d(정수), %s(문자열), %f(실수)

입력 예외 처리: 어려우니 나중에

구구단 간격 맞추기 = \t
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
실습 코드

package sec03.exam01;

import java.util.Scanner;
public class Gugudan {

public static void main(String[] args) throws Exception {
Scanner scanner = new Scanner(System.in);
for(;;) {
System.out.println("원하는 단을 입력하세요 (q입력시 종료)");
String str = scanner.nextLine();
if(str.equals("q")) {
System.out.println("종료");
break;
}else {
int dan = Integer.parseInt(str);
System.out.printf("%d단\n", dan);
int result = 0;
for(int i=1; i<=9; i++) {
result = dan * i;
System.out.printf("%d X %d = %d\n", dan, i, dan*i);
}
System.out.println("");
}
}
}
}

q를 입력하면 종료되고 숫자를 입력하면 구구단을 출력하는 프로그램
if문을 통해 어떻게 문자열과 숫자를 구분할 것인지 고민이 필요했음

package sec03.exam01;

import java.util.Scanner;

public class sum3 {

public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
int start = scanner.nextInt();
int end = scanner.nextInt();
int sum = 0;
for(int i = start; i<=end; i++) {
sum += i; //계산(누적)
}
System.out.printf("%d부터 %d까지의 합은 %d",start,end,sum);
}
}
a ~ b까지의 합을 구하는 프로그램
적절한 변수명을 고민했고
스캐너로 입력되는 데이터의 타입을 정할 수 있다는 점을 배움

package sec03.exam01;

import java.util.Scanner;

public class GradePrintExample {

public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
for(int i=0; i<5; i++) {
System.out.println("이름을 입력하세요");
String name = scanner.nextLine();
System.out.println("점수를 입력하세요");
int score = scanner.nextInt();
scanner.nextLine();
String grade;
if(score >= 90) {
grade = "A";
}else if(score >= 80) {
grade = "B";
}else if(score >= 70) {
grade = "C";
}else {
grade = "F";
}
System.out.printf("성명: %s, 점수: %d, 등급: %s\n", name, score, grade);
scanner.close();
}
}
}
JS를 통해 만들었던 프로그램을 자바를 통해 다시 만듦
그때 배웠던 방식으로 가독성을 끌어올렸지만 AI는 여전히 부족하다고 한다

마인드맵도 마저 그릴 것