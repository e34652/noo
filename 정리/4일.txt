4일

기본타입(primitive) - 정수, 실수, 논리
2의 n승 

정수타입
- byte, short, char, int, long

실수타입
-float(부호 1bit + 지수 8bit + 가수 23bit)
-double

논리타입
-boolean

정수는 0부터 시작 하므로 양수의 범위는 2^n - 1 까지, 음수는 2^n 까지
첫 비트는 부호비트


long타입의 리터럴에는 꼭 L을 붙여주기

char타입 리터럴은 '' 작은따옴표

String 타입은 참조타임

기본타입 외에는 다 따로 저장이 됨

math.random = 난수 0이상 1미만

타입의 허용 범위를 넘어선 강제 타입 변환은 값의 손실을 초래할 수 있다




변수연산 규칙
변수(가 하나라도 포함된)연산에서  정수형 데이터의 기본 타입은 int가 된다
int보다 허용 범위가 작은 데이터들은 모두 int로 자동 변환된다
int 보다 큰 데이터 형이 있을 경우 (long, float, double) 해당 데이터 형이 기본 타입이 된다
 
byte x = 10
long y = 10 

byte result = x + 1 << 1과 x가 int 타입이 되므로 byte 타입 변수인 result에는 들어갈 수 없다
int result1 = x + y << y가 long 타입이므로 x 또한 long 타입이 되고 역시나 int 타입 변수인 result1에는 들어갈 수 없다


String str = 10 + 2 + "" => "12"

캐스팅 연산자(형 변환 연산자) 
-데이터 형(타입) 변환을 수행하는 연산자 (int) (double) 등

형 변환 메서드
String.valueOf = 값을 문자열로 변환
Integer.parseInt = 값을 정수로 변환
Double.parseDouble = 값을 실수로 변환

이 외에도 다양한 형 변환 메서드가 있음

확인문제
1.3번 char = 65535 short = 32768
2.4번 문자열은 기본타입이 아님  변환 방법이 다름
3.1번 Java에서 정수 타입 변수 연산의 기본 타입은 int 타입이므로 int 변수에 저장가능
4.5번 정수 변수 연산의 결과는 int가 됨 
5.char c2 = (char) (c1 + 1) , 1은 int 타입이므로 연산 후 char 타입으로 변환해줘야함
6.int, 2 변수연산 결과물을 int
7.double, (double) x / y double  
8.(int) (var1 + var2) 
9. (int)(var1 + var2 + var3) + (int) Double.parseDouble(var4)
10. 5, 23, 23
11.Byte.parseByte Integer.parseInt, Float.parseFloat, Double.parseDouble

클래스 = 메소드의 모임 
메소드 = 특정 기능을 가진 함수의 모임

각각의 클래스와 메소드가 유기적으로 결합해 하나의 프로그램을 형성

99 3번
130 11번
160 7번
127 1 ~ 11



package sec02.exam01;

import java.util.Random;
import java.util.Scanner;

public class Game1 {
	public static int createNumber(Random random) {
		//Random random = new Random();
		return random.nextInt(10) + 1;
	}

	public static void multiplication() {
		Random random = new Random();
		Scanner scan = new Scanner(System.in);

		int num1 = createNumber(random);
		int num2 = random.nextInt(10)+ 1;
		int multi = num1 * num2;

		System.out.printf("%d X %d = ?\n", num1, num2);
		for (int i = 0; i < 3; i++) {
			System.out.print("입력");
			// String answer = scan.nextLine();
			int answer1 = Integer.parseInt(scan.nextLine());
			if (answer1 == multi) {
				System.out.println("정답!");
				break;
			} else {
				System.out.println("오답!");
			}
		}
	}

	public static void howmany(int x) {
		for (int i = 0; i < x; i++) {
			multiplication();
		}
		System.out.println("종료");
	}

	public static void main(String[] ar) {
		Scanner scan1 = new Scanner(System.in);
		System.out.print("몇 번?");
		int a = scan1.nextInt();
		
		howmany(a);
	}
}

객체지향 프로그래밍이 무엇인지 살짝 맛만 본 느낌이었다
생물학에서 원자 > 분자 > 세포 > 조직 > 기관 순으로 조직화가 일어나듯
작은 코드들이 모여 함수가 되고 함수가 모여 메소드를 이루고 메소드가 모여 클래스를 이루고 
그 클래스들로 하여금 하나의 프로그래밍을 만들어 완성해내는 과정이 재미있었다


