고급언어 = 프로그래밍 언어 = 인간의 표현에 가까움 (C, C++, Java 등)
저급언어 = 하드웨어 언어 = 하드웨어에서 직접 사용됨 = 기계어, 어셈블리어

중간코드 = 고급언어와 저급언어 사이를 잇는 다리
중간표현 = 중간코드를 만들때 컴파일러 또는 가상머신에서 내부적으로 사용되는 데이터 또는 코드 구조

목적코드 = 중간다리를 건너서 생성된 최종적인 이진형태의 코드 ,링커에 의한 변환과정을 통해 기계어가 됨


고급언어 - 중간코드 - 목적코드 - 저급언어

Architecture = 컴퓨터 시스템 전체의 설계방식
컴파일
-인간이 이해할 수 있는 언어(고급 언어)로 작성된 소스 코드를 CPU가 이해할 수 있는 언어(저급 언어)로 번역(변환)하는 작업

컴파일 과정은 컴파일러마다 차이가 존재함

컴파일 과정 
전처리 > 컴파일 > 어셈블리 > 링크 > 로드(실행 파일을 메모리로 로드하고, 프로그램이 실행될 때 각 코드와 데이터의 위치를 지정)

전처리 과정(Pre-processing) 
-전처리기(Preprocessor)를 통해 소스 코드 파일(*.c)을 전처리된 소스 코드 파일(*.i)로 변환하는 과정
주석제거 + 헤더파일 삽입 +  매크로 치환 및 적용

컴파일 과정(Compilation)
-컴파일러(Compiler)를 통해 전처리된 소스 코드 파일(*.i)을 어셈블리어 파일(*.s)로 변환하는 과정이다.
Static 영역에 메모리 할당 + 문법 검사

컴파일러 = 프론트엔드 - 미들엔드 - 백엔드

프론트엔드(Front-end) 
-언어 종속적인 부분 처리 = 소스코드가 해당 언어로 올바르게 작성되었는지 확인
-GIMPLE 트리(소스코드를 트리형태로 표현한 자료구조) 생성 => 미들엔드에 토스
다양한 언어들이 각 언어에 맞게 처리된 후 공통된 중간 표현인 GIMPLE 트리로 변환되어 언어 종속적인 부분을 처리가능

미들엔드(Middle-end)
-GIMPLE 트리를 이용해 Architecture 비종속적인 최적화를 수행 = CPU 상관없이 가능한 최적화
-RTL(고급언어와 어셈블리 언어의 중간 형태)를 생성 => 백엔드에 토스
*RTL = 레지스터 전송 언어(Register Transfer Language) = 디지털 모듈의 레지스터 간 미세한 작업 시퀀스를 기호 형식으로 표현하는 시스템
Architecture = 컴퓨터 시스템 전체의 설계방식

백엔드(Back-end)
-Architecture 종속적인 최적화 수행 => Architecture 특성에 따라 최적화를 수행(CPU 명령어 최적화 등)
-Assembly 코드 생성 => 어셈블러에게 토스
Architecture 종속적인 최적화를 수행하므로 해당 Architecture 외에는 호환이 안됨 = 아키텍처 종속성
Architecture = 컴퓨터 시스템 전체의 설계방식



어셈블리 과정 (Assembly)
-어셈블러(Assembler)를 통해 어셈블리어 파일(*.s)을 오브젝트 파일(*.o)로 변환하는 과정
*어셈블리어 = 기계어를 사람이 이해할 수 있게 부호화한 것으로 CPU 명령어(기계어)와 1대1로 매칭

오브젝트 파일 = 오브젝트 코드로 구성된 파일, 운영체제마다 특정한 파일 포맷을 가짐 = 운영체제 종속성
오브젝트 코드 = 어셈블리어가 기계어로 변환된 결과물 
*오브젝트 파일 포맷 나중에 공부
byte code = 목적파일 > jvm이 실행


링킹 과정(Linking) 
링커(Linker)를 통해 오브젝트 파일(*.o)들을 묶어 실행 파일로 만드는 과정
오브젝트 파일들과 프로그램에서 사용하는 라이브러리 파일들을 링크하여 하나의 실행 파일을 만듦
이때 라이브러리를 링크하는 방법에 따라 정적 링킹(Static Linking)과 동적 링킹(Dynamic Linking)으로 나뉨 

컴파일된 목적 코드를 하나로 합체 + 각 코드의 상대적인 주소 해결 + 외부 라이브러리 추가

*정적 라이브러리 
-정적 링킹(Static Linking) 과정에서 링커가 프로그램에 필요로 하는 부분을 라이브러리에서 찾아 실행 파일에 복사하는 방식

*동적 라이브러리
-동적 링킹(Dynamic Linking) 과정에서 링커가 라이브러리 내용의 주소만 가지고 있다가 
런타임에 실행 파일과 라이브러리가 메모리에 위치할 때 해당 주소에서 필요한 내용을 가져오는 방식



