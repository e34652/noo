9일차 

java 언어의 특징과 역사 

jvm = 운영체제와 하드웨어에서 자유로워짐

jdk = 개발 + 실행
jre = 실행만

EE = 기업용 / SE + 서버API
SE = 표준
ME = 마이크로

플랫폼 독립성
객체지향 ( 캡슐화 상속, 다형성)
클래스로 캡슐화 
소스와 클래스 파일
가비지 컬렉터

모듈화 = 모듈파일을 통해 라이브러리에서 필요한 것만 로드 가능

라이브러리 = API 모음
IDE = 통합개발환경 = 편집 + 컴파일 + 디버깅 통합

리터럴 = 프로그램에서 직접(direct) 표현한 값 

int y = 100.0 <<리터럴 먼저 인식해서 100.0을 보고 double 타입에 맞춰 메모리를 잡았다가 int 타입으로 바꿈 << 안들어감
long x = 100 << 리터럴 먼저 인식해서 100을 보고 int 타입에 맞춰 메모리를 잡았다가 long 타입으로 바꿈 100L << 처음부터 long

첫숫자 0 = 리터럴식으로 다른 진법을 나타냄
E = 10^-4

상수선언 = final = final double PI = 3.141592...
선언 시 초기값을 지정해야하며 실행중 값을 변경할 수 없음 

var = 타입을 생략하고 변수선언 가능 << 컴파일러가 추론하여 결정(java 9 이상)ㅁ
Scanner에서 nextInt랑 nextLine 같이 쓰면 오류

삼항연산자 = 조건 ? 참표현식 : 거짓표현식

switch문 
switch (값)  두값의 타입이 일치해야하고 
case (조건 값)  타입은 문자열도 가능하다

do while 
실행문이 반드시 한번은 실행된다

배열을 매개값으로 받으면 매개변수의 타입에 []를 붙여준다

객체 = 고유한 특성(필드)과 동작(메소드)

Generate getters and setters = 캡슐화 시키는 메소드
private 필드 선언 후 get, set 메소드를 사용해 직접적인 접근을 막는 방법
추후 해당 private 필드로 다른 행동을 하고싶을 경우 메소드를 추가하는 방식

객체지향 = 절차지향을 다른 방식으로 

참조타입변수 = 주소값 저장
기본타입변수 = 실제값 저장

메모리영역
Method영역
JVM이 로드시 클래스별로 정적필드와 상수, 메소드코드 생성자코드 등을 분류해 저장 

Heap영역 
객체와 배열 저장, 참조되지 않는 변수는 Garbage Collector가 제거하며 메모리 관리

JVM Stack 영역
메소드를 호출할 때마다 Frame을 추가하고 종료되면 제거함
Frame에서는 로컬변수스택이 변수를 관리함

class = 데이터 저장
method = 데이터 조작

this = 메소드에서 현재 객체를 가리킴 필드)
this() = 같은 코드의 다른 생성자를 불러옴, 코이 첫줄에 써야함

Circle[] c = new Circle[5] << 5개의 Circle 클래스 주소를 저장할 수 있는 배열 
배열 = 참조타입 
클래스 = 참조타입 

클래스배열 = 참조가 두번 일어남 
클래스배열은 배열안에 클래스 주소가 들어있음

변수 > 클래스배열 > 클래스 총 2번의 참조가 일어남
객체를 생성할때도 클래스배열객체를 생성 후 클래스를 한번 더 생성함

끝나고 할일 = this() 이해, 클래스배열 예제 이해 및 보완

this() = this생성자
new 연산자로 인해 생성자가 실행될 때  외부에서 입력된 매개값의 타입과 개수에 따라 어떤 생성자가 실행될지 구별된다
this 생성자는 실행된 생성자에서 다른 생성자를 호출하며 괄호안에 입력된 매개값의 타입과 개수를 기준으로 호출할 생성자를 결정한다
전달된 매개값은 호출된 생성자에서 각 매개변수에 대입된 후 작업이 실행된다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


메소드

메소드 시그니처 = 선언부
리턴타입 + 메소드 이름 + 매개변수 선언 + 실행블록

