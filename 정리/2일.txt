오늘 한 것

실습 - JS 맛보기 + HTML, 반복문과 조건 2차원 이상의 for문,
구구단, 학점, 홀수 짝수 배수, Github, CMD명령어 맛보기, github 업로드 갱신 다운로드

배경지식 - 언어별 특징, WSL, VM, Cotlin, C#, Linux와 Cloud 통신규약,Swing, SQL, NoSQL, MongoDB, docker,kubernetes

Swing = Java에서 GUI 애플리케이션을 만들 때 사용되는 툴킷(toolkit)이자 라이브러리

SQL(Structured Query Language) = 데이터베이스 관리 시스템(RDBMS)에서 사용되는 표준언어
NoSQL(Not Only SQL) = 특정 데이터 모델에 대해 특정 목적에 맞추어 구축되는 데이터베이스, 대규모 데이터셋이나 실시간 데이터처리에 효과적

SQL vs NoSQL

데이터 모델
SQL = 테이블 형태로 구조화되고 테이블 간의 관계를 이용해 데이터를 관리하며 스키마가 경직돼 데이터 변경이 어려움
NoSQL = 데이터 베이스 유형에 따라 다양한 형태로 구조화되며 스키마가 유연해 데이터가 유동적일 때 좋음

확장성
SQL = 단일 서버의 성능을 향상시키는 수직 확장 방식, 복잡한 확장이 어렵고 한계가 있음
NoSQL = 서버를 추가하여 성능을 향상시키는 수평 확장 방식, 확장이 쉽고 분산저장이 가능해 대규모 시스템에 유용

트랜잭션
SQL = ACID 속성(원자성, 일관성, 고립성, 지속성) 준수
NoSQL = 비교적 자유로우며 특히 일관성과 고립성이 그러함

트랜잭션
-ATM이나 데이터베이스 등의 시스템에서 업무 처리의 최소 단위

데이터베이스 시스템에서는 작업의 논리적인 단위로 사용자가 시스템에 대한 서비스 요구 시
시스템이 응답하기 위한 상태 변환 과정의 작업 단위이다.

트랜잭션은 ACID로 일컫는 네 가지 조건을 따른다
Atomicity(원자성) = 원자처럼 더이상 쪼개지지 않으므로 일부만 성공하는 건 반영되지 않고 실패로 간주한다
Consistency(일관성) = 트랜잭션이 진행되는 동안 데이터베이스가 변경되더라도 기존에 참조한 데이터베이스로 진행된다
Isolation(고립성) = 트랜잭션이 작업도중에 변경한 데이터는 완료될 때까지 다른 트랜잭션이 참조할 수 없다, 서로 간섭 불가
Durability(지속성) = 트랜잭션이 성공적으로 완료되면 그 결과는 영구적으로 저장되어야함

MongoDB
-NoSQL방식, JSON 스타일의 BSON(Binary JSON) 형식으로 데이터를 저장, ACID를 포기한 대신 빠른 속도가 특징

C#
-MS에서 개발한 객체 지향 프로그래밍 언어로 크로스 플랫폼 개발이 가능함

docker
-리눅스 컨테이너스(LXS)라는 기술을 이용하여 만든 컨테이너 기술
한 대의 서버를 여러 패키지로 나누어 여러 개의 서비스를 구동가능
각각이 컨테이너로 격리된 구조이므로 보안상의 이점이 있음

kubernetes
-도커 짝꿍

Ubuntu
데비안(Debian) 리눅스 기반의 운영 체제(Operating System)로 호환성이 뛰어남

웹 환경
-웹 기술, 웹 애플리케이션, 웹 서버 및 백엔드, 웹 프레임워크 및 라이브러리, 웹 브라우저, 웹 표준과 규약 등
사용자가 웹을 통해 상호 작용하는데 필요한 기술, 서비스, 도구 등을 아우르는 개념

Protocol(통신규약)
-데이터를 교환하기 위한 규칙의 모음으로 여러 기준 정의해 통신을 원활하게 함
여러 프로토콜은 특정 용도에 맞게 설계되어 있으며 상황 및 사용 목적에 따라 선택됨
(https, http, tcp/ip, udp, ftp, bluetooth 등)

DNS(Domain Name System) = 서버명.기관명.기관성격.국가명
도메인(www.naver.com)을 IP 주소로 변환해 컴퓨터가 이해할 수 있게 함

Query
-웹 서버에 대한 웹 클라이언트의 요청 또는 명령

Port
-네트워크 연결이 시작되고 끝나는 가상 지점
서로 다른 종류의 트래픽을 구분하고 목적지를 지정하는데 사용됨

Browser
인터넷에 접근하기 위한 소프트웨어의 총칭

Client
고객, 서버에 요청을 보내는 주체, 서버로부터 받은 서비스를 사용하는 상용자

Server
클라이언트의 요청에 따른 서비스 제공하는 시스템

Packing
데이터를 압축하거나 보호하는 등의 목적으로 사용되는 여러 기술
원래의 형태를 유지하면서 효율적으로 데이터를 처리하거나 전달함

VM(Virtual Machine)
-소프트웨어로 가상의 컴퓨팅 환경을 구현한 것, 다양한 목적과 기능을 가진 많은 종류가 있음
가상의 운영체제를 설치가능

WSL(Windows Subsystem for Linux) 
-윈도우 운영체제에서 리눅스 환경을 실행하는 기술

VM과 WSL의 차이를 비교해 볼 것

컴파일 언어
= 해석 후 중간파일을 거쳐 실행,융통성이 없음 

인터프리터 언어
= 융통성이 많음.바로 실행 가능하며 실행중 명령어를 해석

코틀린(구글), C#(MS) = 잠재력 있는 언어

리눅스 = 클라우드 분야의 필수 언어

변수 선언 = 메모리에 방을 잡아주는 것
CPU = 계산 , 모든걸 덧셈으로 계산함

등호 = 우측의 피연산자를 좌측 좌표에 대입
literal = 직접적으로 입력된 값은 미리 로드 되었다가 실행시 대입된다
지정문 = 값을 지정하는 것 (x=100)
HTML = 철저하게 문서, 웹 프로그래밍 = 문서를 만드는 것과 같음


prompt로 입력된 값은 문자열 데이터가 된다
정수연산에 사용하려면 정수타입으로 바꿔줘야한다

반복문의 조건에 일치하지 않으면 바로 빠져나감

2차원 이상의 for문에서 어떤 값이 언제까지 고정되어야 하는지 잘 생각해보자
2차원 이상의 for문에서 먼저 선언된 반복문의 변수가 고정된다

<script>
<pre>

github = 소스코드 버전관리에 용이함

윈도우 cmd명령어
dir = 디렉토리: 현재 경로에 위치한 폴더와 파일들을 보여줌
cd = 입력한 디렉토리로 이동
cd.. = 뒤로가기
cls = 창 청소


리눅스 cmd 명령어
ls, ls-al, ll = 리눅스판 디렉토리
clear = 창 청소
pwd = 현재 디렉토리
cd = 입력한 디렉토리 이동

CMD 창에서 파일의 앞글자만 쓰고 TAP키를 누르면 해당하는 파일명을 완성시켜준다

github 업로드

새로운 Repository에 처음 업로드 할 때

cd 또는 D:, C: 등의 명령어를 통해 업로드할 경로로 이동

git init = git 저장소 초기화(시동on)
git add README.md, 전부 올릴거라면 git add . = 작업 디렉토리의 변경 내용을 스테이징 영역에 등록 => Git이 기록
git commit -m "first commit" = 스테이징 영역에 있는 변경 내용을 저장소에 영구 기록
git remote add origin ~ = 로컬 저장소와 원격 저장소를 연결하여 업로드와 다운로드 가능
git push -u origin master(또는 main) = 로컬 저장소에서 원격 저장소로 전송

갱신만 할 때
git remote add origin 깃헙링크
git push -u origin 메인

내려받을 때
git clone 깃헙링크

bin = 실행파일(exe,dll)이 들어있는 폴더
JAVA_HOME = 자바 설치경로로 약속된 환경 변수, 다른 프로그램에서도 참조함
%JAVA_HOME%\bin

자바 클래스와 인터페이스는 항상 대문자로 시작하는 것이 관례
패키지는 소문자
자바는 저장할 때 컴파일이 이루어짐

A에서 B까지의 합
sum = a
sum = sum + x

구구단 = 2중 for문
<script>
//구구단 만들기
let x = prompt("몇 단?");
x = parseInt(x);
let c = x;
//let originalX = x; << GPT 코드
document.write('<h1>');
for(; x < c+1;++x){
for(let y=1; y < 10; y++){
document.write(x + " * " + y + " = " + (x*y) + "<br/>");
//document.write(`${x} * ${y} = ${x * y}<br>`); <<GPT 코드
}
}
document.write('<h1/>');
</script>

원리는 비슷했으나 변수명의 직관성과 출력부분의 가독성에서 큰 차이가 있었다

'${변수}' 를 활용하면 문자열 안에서도 변수의 값을 불러올 수 있다
출력할 때 여러번 따옴표를 여닫지 않고 한번에 작성 가능

학점

<script>
document.write("<pre>");
for(let x=1; x<6;x++){
let score = prompt("점수를 입력하세요");
score = parseInt(score);
if(score >= 90){
document.writeln(x+ "번째 학생: A\n");
}else{
if(score >=80){
document.writeln(x+ "번째 학생: B\n");
}else{
if(score >=70){
document.writeln(x+ "번째 학생: C\n");
}else{
document.writeln(x+ "번째 학생: F\n");
}
}
}
}
document.write("<pre/>");
</script>


<!--document.write("<pre>");
for (let x = 1; x < 6; x++) {
let score = prompt("점수를 입력하세요");
score = parseInt(score);

let grade;

if (score >= 90) {
grade = 'A';
} else if (score >= 80) {
grade = 'B';
} else if (score >= 70) {
grade = 'C';
} else {
grade = 'F';
}

document.writeln(`${x}번째 학생: ${grade}\n`);

else if를 사용해 가독성이 훨씬 좋아졌고 겹치는 부분을 변수화해
코드가 간결해지고 출력 코드도 한 줄로 묶을 수 있었다

중복되는 부분은 변수화 하고 조건을 잘 생각해 가장 잘 어울리는 제어문을 사용하자

배수
X % A = 0 << A의 배수
X % A != 0 << A의 배수가 아님